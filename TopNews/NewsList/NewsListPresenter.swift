//
//  NewsListPresenter.swift
//  TopNews
//
//  Created by Sujata Chakraborty on 11/10/2019.
//  Copyright (c) 2019 Sujata Chakraborty. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NewsListPresentationLogic
{
    /**
     Following delegates will Handle the data and convert it to View model and share formatted data
     or error to View Controller
     
    */
    func presentNewsList(response: NewsList.FetchNews.Response)
    func presentError(error : RBError)

}

class NewsListPresenter: NewsListPresentationLogic
{
    weak var viewController: NewsListDisplayLogic?
    
    
    // MARK: NewsListPresentationLogic functions
    
    func presentNewsList(response: NewsList.FetchNews.Response)
    {
        var displayedNewsList : [NewsList.FetchNews.ViewModel.DisplayNews] = []
        
        for news in response.news {
            
            let dateToShow = formatNewsPublishedTime(publishTime: news.publishedAt)
            let newsSource = createSourceString(source: news.source?.name)
            let displayedNews = NewsList.FetchNews.ViewModel.DisplayNews.init(title: news.title ?? Constants.kNoInfoMessage, imageURL: news.urlToImage ?? "", content: news.content ?? "" , description: news.description ?? "", time: dateToShow , source: newsSource)
            
            displayedNewsList.append(displayedNews)
        }
        let viewModel = NewsList.FetchNews.ViewModel.init(NewsDetails: displayedNewsList)
        viewController?.displayNewsList(viewModel: viewModel)
    }
    
    
    func presentError(error : RBError)
    {
        viewController?.receivedError(error: error)
    }

    
    /**
      Format the time in the follwoing format
      eg:- 3 hours ago/2 mins ago/a sec ago/just now
    */
    
    func formatNewsPublishedTime(publishTime : String?) -> String
    {
        guard let publishTime = publishTime else
        {
            return ""
        }
        
        guard publishTime.trim().count != 0 else
        {
            return ""
        }
        let date = UtilityClass.stringToDateFormat(dateInString: publishTime)
        
        if let date = date
        {
            let timeDifferenceInStr = UtilityClass.findDifference(FromTime: Date(), toDate: date)
            return timeDifferenceInStr
        }
        else
        {
            return ""
        }
    }
    
    
    /**
     Format news source data for ViewModel
     */
    
    func createSourceString(source : String?) -> String
    {
        guard let source = source else
        {
            return ""
        }
        
        guard source.trim().count != 0 else
        {
            return ""
        }
        
        return "From: " + source
    }
    
}
