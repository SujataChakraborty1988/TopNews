//
//  NewsListViewController.swift
//  TopNews
//
//  Created by Sujata Chakraborty on 11/10/2019.
//  Copyright (c) 2019 Sujata Chakraborty. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NewsListDisplayLogic: class
{
    /**
     
     This delegate will display news and populate collection view cell
     */
    func displayNewsList(viewModel: NewsList.FetchNews.ViewModel)
    
    func receivedError(error : RBError)

}

class NewsListViewController: UICollectionViewController, NewsListDisplayLogic
{
    
    var interactor: NewsListBusinessLogic?
    var router: (NSObjectProtocol & NewsListRoutingLogic & NewsListDataPassing)?
    
    var displayedNews : [NewsList.FetchNews.ViewModel.DisplayNews] = []
    {
        didSet
        {
            self.collectionView.reloadData()
            ongoingRequest = false
        }
    }
    
    //CONSTANT
    static let cellIdentifier = "NewsCollectionViewCell"
    
    var pageNumber = 0
    var ongoingRequest = false
    var fetchingNextPageRequired = true

    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = NewsListInteractor()
        let presenter = NewsListPresenter()
        let router = NewsListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        fetchNews()
        setUpView()
    }
    
    
    //MARK: View Setup
    
    func setUpView()
    {
        //set top title
        self.title = "Top News"
        
        //Collection View Set up
        collectionView.register(UICollectionViewCell.self, forCellWithReuseIdentifier: "Cell")
        
        let collectionLineGap = CGFloat(Constants.kCollectionLineGap)
        let collectionInset = CGFloat(Constants.kCollectionInset)
        
        collectionView.contentInset = UIEdgeInsets(top: collectionInset, left: collectionInset, bottom: collectionInset, right: collectionLineGap)
        
        let flowLayout = CustomCollectionViewLayout()
        flowLayout.minimumInteritemSpacing = collectionInset
        flowLayout.minimumLineSpacing = collectionInset
        collectionView.collectionViewLayout = flowLayout
        
        collectionView.register(UINib.init(nibName: NewsListViewController.cellIdentifier, bundle: nil), forCellWithReuseIdentifier: NewsListViewController.cellIdentifier)
    }
    
    // MARK: Data request call
    
    
    /**
     Fetch top news
     */
    func fetchNews()
    {
        guard ongoingRequest == false else {
            return
        }
        
        ongoingRequest = true
        pageNumber = pageNumber + 1
        
        let request = NewsList.FetchNews.Request.init(pageSize: Constants.kDefaultPageSize, pageNumber: pageNumber)
        interactor?.fetchNewsList(request: request)
    }
    
    
    //MARK: NewsListDisplayLogic Delegate
    
    func displayNewsList(viewModel: NewsList.FetchNews.ViewModel)
    {
        displayedNews = viewModel.NewsDetails
    }
    
    
    func receivedError(error : RBError)
    {
        if error.errorCode == RBErrorCode.EmptyData
        {
            fetchingNextPageRequired = false
        }
        else
        {
            pageNumber = pageNumber - 1
            
        }
    }
    
    
    override func willTransition(to newCollection: UITraitCollection, with coordinator: UIViewControllerTransitionCoordinator) {
        
        self.collectionView.collectionViewLayout.invalidateLayout()
    }

}


//CollectionView view delegates

extension NewsListViewController
{
    
    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return displayedNews.count
    }
    
    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "NewsCollectionViewCell", for: indexPath) as! NewsCollectionViewCell
        let displayedNewsItem = displayedNews[indexPath.row]
        cell.tag = indexPath.item
        cell.configure(with: displayedNewsItem)
        return cell
    }
}


//Scroll view delegates
extension NewsListViewController
{
    
    
    override func scrollViewDidScroll(_ scrollView: UIScrollView) {
        
        guard fetchingNextPageRequired == true else {
            
            return
        }
        
        let targetIndexPath = IndexPath(row: (self.displayedNews.count)-1, section: 0)
        let collectionVW = scrollView as! UICollectionView
        let visibleIndexes = collectionVW.indexPathsForVisibleItems
        
        if(visibleIndexes.contains(targetIndexPath) )
        {
            fetchNews()
        }
        
        
    }
}
